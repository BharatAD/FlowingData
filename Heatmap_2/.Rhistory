qplot(x=Dim1, y=Dim2, data=CompLibTrain.ifm, xlab="PC1 (48.12%)", ylab="PC2 (15.80%)", xlim=c(-10,12), ylim=c(-10,10)) + geom_point(aes(colour=logBBlabel), size= 3) + scale_colour_gradient(low="red", high="green") + theme_bw() + labs(title="Principal Component Analysis: Individual factor map", colour = "LogBB")
dev.off()
pdf("PC1PC3 Individual Factor Map.pdf", width=9, height=9)
qplot(x=Dim1, y=Dim3, data=CompLibTrain.ifm, xlab="PC1 (48.12%)", ylab="PC3 (8.59%)", xlim=c(-10,12), ylim=c(-10,10)) + geom_point(aes(colour=logBBlabel), size= 3) + scale_colour_gradient(low="red", high="green") + theme_bw() + labs(title="Principal Component Analysis: Individual factor map", colour = "LogBB")
dev.off()
require(grid)
Name <- rownames(CompLibTrain.vfm)
xend <- CompLibTrain.vfm$Dim1
yend <- CompLibTrain.vfm$Dim2
yend2 <- CompLibTrain.vfm$Dim3
pdf("PC1PC2 Loadings.pdf", width=9, height=9)
qplot(x=Dim1, y=Dim2, data=CompLibTrain.vfm, xlab="PC1 (48.12%)", ylab="PC2 (15.80%)", xlim=c(-1,1.2), ylim=c(-0.9,0.9)) + geom_point(aes(size=3, colour=Dim3)) + theme_bw() + labs(title="Principal Component Analysis: Vector factor map", colour = "PC3 (8.59%)") + geom_text(label=Name, hjust = -0.5, nudge_x= 0, size=4) + scale_colour_gradient(low = "blue") + theme(legend.position="right") + scale_size(guide="none") + geom_segment(CompLibTrain.vfm, mapping=aes(x=0, y=0, xend=0.95*xend, yend=0.95*yend), arrow=arrow(angle=25, length=unit(0.10, "inches")), size=0.5, colour="black")
dev.off()
pdf("PC1PC3 Loadings.pdf", width=9, height=9)
qplot(x=Dim1, y=Dim3, data=CompLibTrain.vfm, xlab="PC1 (48.12%)", ylab="PC3 (8.59%)", xlim=c(-1,1.2), ylim=c(-0.6,0.9)) + geom_point(aes(size=3, colour=Dim2)) + theme_bw() + labs(title="Principal Component Analysis: Vector factor map", colour = "PC2 (15.80%)") + geom_text(label=Name, hjust = -0.5, nudge_x= 0, size=4) + scale_colour_gradient(low = "blue") + theme(legend.position="right") + scale_size(guide="none") + geom_segment(CompLibTrain.vfm, mapping=aes(x=0, y=0, xend=0.95*xend, yend=0.95*yend2), arrow=arrow(angle=25, length=unit(0.10, "inches")), size=0.5, colour="black")
dev.off()
PCcorrelations <- cor(CompLibTrain)
dim(PCcorrelations)
library(corrplot)
library(RColorBrewer)
pdf("Unlabelled Correlogram.pdf", width=14, height=14)
corrplot(PCcorrelations, order = "FPC", method="color",type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5)
dev.off()
pdf("Correlogram.pdf", width=14, height=14)
corrplot(PCcorrelations, order = "FPC", method="color", type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
highCorr <- findCorrelation(PCcorrelations, cutoff = .80)
head(highCorr)
filteredTrain <- CompLibTrain[, -highCorr]
str(filteredTrain)
newPCcorrelations <- cor(filteredTrain)
pdf("NewCorrelogram.pdf", width=14, height=14)
corrplot(newPCcorrelations, order = "FPC", method="color",type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
highCorr <- findCorrelation(PCcorrelations, cutoff = .75)
head(highCorr)
filteredTrain <- CompLibTrain[, -highCorr]
str(filteredTrain)
newPCcorrelations <- cor(filteredTrain)
pdf("NewCorrelogram.pdf", width=14, height=14)
corrplot(newPCcorrelations, order = "FPC", method="color",type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
filteredTrain.pca <- PCA(filteredTrain)
dev.off()
filteredTrain.pca <- PCA(filteredTrain)
head(filteredTrain.pca$eig)
pdf("Principal Component Analysis 2.pdf", width=25, height=10)
par(mfrow=c(1,2))
plot.PCA(filteredTrain.pca, choix="ind", habillage="ind", col.hab="logBBlabel", palette=palette(c("red", "green")))
plot.PCA(filteredTrain.pca, choix="var")
dev.off()
head(filteredTrain.pca$eig)
highCorr <- findCorrelation(PCcorrelations, cutoff = .80)
head(highCorr)
filteredTrain <- CompLibTrain[, -highCorr]
str(filteredTrain)
filteredTrain.pca <- PCA(filteredTrain)
head(filteredTrain.pca$eig)
highCorr <- findCorrelation(PCcorrelations, cutoff = .75)
head(highCorr)
filteredTrain <- CompLibTrain[, -highCorr]
str(filteredTrain)
head(filteredTrain.pca)
head(filteredTrain.pca$coord)
filteredTrain.pca$ind
filteredTrain.pca$var
CompLibTrain.pca$var
PCcorrelations2 <- cor(LabelTrain)
dim(PCcorrelations2)
pdf("Correlogram 2.pdf", width=14, height=14)
corrplot(PCcorrelations, order = "FPC", method="color", type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
dim(PCcorrelations2)
PCcorrelations2 <- cor(LabelTrain)
dim(PCcorrelations2)
pdf("Correlogram 2.pdf", width=14, height=14)
corrplot(PCcorrelations2, order = "FPC", method="color", type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
PCcorrelations2 <- cor(LabelTrain)
dim(PCcorrelations2)
pdf("Correlogram 2.pdf", width=14, height=14)
corrplot(PCcorrelations2, order = "FPC", method="color", type="lower", col=brewer.pal(n=8, name="RdBu"), tl.col="black", tl.srt=45, tl.cex=1.5, cl.cex=1.5, addCoef.col = "black")
dev.off()
pdf("Comparing physicochemical properties against groups - 2.pdf", height=20, width=40)
pdf("Comparing physicochemical properties against groups - 2.pdf", height=20, width=40)
par(mfrow=c(3,5))
boxplot(CompLib.df$Mol.Weight ~ CompLibTag$group, data=CompLib.df, main="Molecular Weight", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,1000), pch=20)
boxplot(CompLib.df$HBA ~ CompLibTag$group, data=CompLib.df, main="HBA", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,30), pch=20)
boxplot(CompLib.df$HBD ~ CompLibTag$group, data=CompLib.df, main="HBD", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,20), pch=20)
boxplot(CompLib.df$Charge7.4 ~ CompLibTag$group, data=CompLib.df, main="Formal Charge (pH 7.4)", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(-5,5), pch=20)
boxplot(CompLib.df$KFI ~ CompLibTag$group, data=CompLib.df, main="Kier Flexibility Index PHI", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,40), pch=20)
boxplot(CompLib.df$CMR ~ CompLibTag$group, data=CompLib.df, main="Calculated Molar Refractivity", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,30), pch=20)
boxplot(CompLib.df$CLogP ~ CompLibTag$group, data=CompLib.df, main="Calculated LogP", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(-10,15), pch=20)
boxplot(CompLib.df$ALogP ~ CompLibTag$group, data=CompLib.df, main="Atomic LogP", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(-10,15), pch=20)
boxplot(CompLib.df$LogD ~ CompLibTag$group, data=CompLib.df, main="LogD", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(-10,15), pch=20)
boxplot(CompLib.df$Hpb ~ CompLibTag$group, data=CompLib.df, main="Hydrophibicity", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,20), pch=20)
boxplot(CompLib.df$LogS ~ CompLibTag$group, data=CompLib.df, main="Solubility LogS", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(-15,5), pch=20)
boxplot(CompLib.df$Vol. ~ CompLibTag$group, data=CompLib.df, main="Volume", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,1200),pch=20)
boxplot(CompLib.df$SA ~ CompLibTag$group, data=CompLib.df, main="Surface Area", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,1200), pch=20)
boxplot(CompLib.df$PSA ~ CompLibTag$group, data=CompLib.df, main="Polar Surface Area", col=c("coral1","grey97","skyblue3"), xlab="Groups", ylab="Values", ylim=c(0,300), pch=20)
dev.off()
library(pls)
install.packages("pls")
?pls
setwd("~/Desktop/Github shares/FlowingData")
install.packages("portfolio")
install.packages("aplpack")
data <- read.csv("http://datasets.flowingdata.com/post-data.txt")
head(data)
library(portfolio)
library(aplpack)
library(nlme)
library(tcklk)
library(tcltk)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
pdf("FlowingData Tree Map.pdf", height=40, width=30)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
dev.off()
pdf("FlowingData Tree Map.pdf", height=10, width=20)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
dev.off()
pdf("FlowingData Tree Map.pdf", height=15, width=20)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
dev.off()
?map.market()
pdf("Tree Map.pdf", height=15, width=20)
map.market(id=data$id, area=data$views, group=data$category, color=data$comments, main="FlowingData Map")
dev.off()
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState-formatted.csv")
head(crime)
faces(crime[,2:8])
?faces()
faces(crime[,2:8], face.type=2)
faces(crime[,2:8], face.type=0)
crime_filled <- cbind(crime[,1:6], rep(0, length(crime$state)), crime[,7:8])
pdf("Faces.pdf", height=10, width=10)
faces(crime[,2:8], face.type=0)
dev.off()
faces(crime_filled[,2:8])
pdf("Faces2.pdf", height=10, width=10)
faces(crime_filled[,2:8], face.type=0)
dev.off()
faces(crime_filled[,2:8], labels=crime_filled$state)
pdf("Faces3.pdf", height=10, width=10)
faces(crime_filled[,2:8], labels=crime_filled$state)
dev.off()
crime <- read.csv("http://datasets.flowingdata.com/crimeRatesByState2005.tsv", header=TRUE, sep="\t")
crime
symbols(crime$murder, crime$burglary, circles=crime$population)
names(crime)
radius <- sqrt( crime$population/ pi )
symbols(crime$murder, crime$burglary, circles=radius)
symbols(crime$murder, crime$burglary, circles=radius, inches=0.35, fg="white", bg="red", xlab="Murder Rate", ylab="Burglary Rate")
text(crime$murder, crime$burglary, crime$state, cex=0.5)
fakedata <- c(5, 4, 3, 2, 1)
pie(fakedata, clockwise=TRUE, labels=fakedata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white")
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col="black")
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=c("blue", "black"))
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=c("black", "dark gray", "gray", "light gray", "white"))
numdata <- length(fakedata)
grays <- gray(0:numdata / numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=grays)
heatcols <- heat.colors(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=heatcols)
rainbowcols <- rainbow(numdata)
morecolors <- c()
for (i in 1:length(morefakedata)) {
colindex <- round((morefakedata[i] / fakemax) * numshades)
morecolors <- c(morecolors, colors2[colindex])
}
pie(morefakedata, clockwise=TRUE, labels=morefakedata, border="white", col=morecolors)
# Topographic color scheme
topocols <- topo.colors(numdata)
pie(fakedata, clockwise=TRUE, labels=fakedata, border="white", col=topocols)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
nba <- nba[order(nba$PTS),]
nba_matrix <- data.matrix(nba)
nba <- nba[, 2:20]
nba_matrix <- data.matrix(nba)
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba_heatmap <- heatmap(nba_matrix, Rowv=NA, Colv=NA, col = heat.colors(256), scale="column", margins=c(5,10))
library(rvest)
install.packages("rvest")
aida_ranking <- html("https://www.aidainternational.org/ranking")
?rvest()
library(rvest)
aida_ranking <- html("https://www.aidainternational.org/ranking")
head(aida_ranking)
aida_worldrecords <- html("http://www.aidainternational.org/webservices/divers/worldRecords")
aida_worldrecords <- read_html("http://www.aidainternational.org/webservices/divers/worldRecords")
aida_worldrecords
head(aida_worldrecords)
str(aida_worldrecords)
load('unisexCnts.RData')
nameTotals <- rowSums(unisexCnts)
unisexCnts <- load('unisexCnts.RData')
library(jsonlite)
aida_worldrecords <- fromJSON("http://www.aidainternational.org/webservices/divers/worldRecords")
head(aida_worldrecords)
str(aida_worldrecords)
names(aida_worldrecords)
aida_worldrecords$femaleWorldRecords
str(aida_worldrecords$femaleWorldRecords)
aida_worldrecords$femaleWorldRecords
names(aida_worldrecords$femaleWorldRecords)
names(aida_worldrecords)
data(mario)
aida_worldrecords$femaleWorldRecords
head(aida_worldrecords$femaleWorldRecords)
str(aida_worldrecords) # nested data.frames
head(aida_worldrecords$femaleWorldRecords$cnf)
head(aida_worldrecords)
str(aida_worldrecords)
str(aida_worldrecords$femaleWorldRecords)
aida_ranking <- fromJSON("https://www.aidainternational.org/ranking")
aida_worldrecords$femaleWorldRecords
str(aida_worldrecords)
aida_worldrecords$femaleWorldRecords$date
aida_worldrecords$femaleWorldRecords$dnf$date
aida_worldrecords$femaleWorldRecords$dnf
aida_divers <- fromJSON("https://www.aidainternational.org/api#accordion/datamodel/diverinfocontainer")
str(aida_divers)
aida_ranking <- fromJSON("https://www.aidainternational.org/ranking")
aida_ranking
str(aida_ranking)
aida_ranking <- fromXML("https://www.aidainternational.org/ranking")
library(XML2R)
install.packages("XML2R")
library(XML2R)
aida_ranking <- XML2Obs("https://www.aidainternational.org/ranking")
aida_ranking <- fromXML("https://www.aidainternational.org/ranking")
table(names(aida_ranking))
collapse_obs(aida_ranking)
startYear <- 1960; endYear <- 2009
life <- read.csv("data/life-expectancy-cleaned.csv", stringsAsFactors=FALSE)
startYear <- 1960; endYear <- 2009
#
# Load the data
#
life <- read.csv("data/life-expectancy-cleaned.csv", stringsAsFactors=FALSE)
setwd("~/Desktop/Github shares/FlowingData/Moving Past Default R Charts/data")
startYear <- 1960; endYear <- 2009
life <- read.csv("data/life-expectancy-cleaned.csv", stringsAsFactors=FALSE)
setwd("~/Desktop/Github shares/FlowingData/Moving Past Default R Charts/")
life <- read.csv("data/life-expectancy-cleaned.csv", stringsAsFactors=FALSE)
countryRegions <- read.csv("data/country-regions.csv", stringsAsFactors=FALSE)
lifeComp <- na.omit(life)
lifeReg <- merge(lifeComp, countryRegions, by.x="Country.Code", by.y="CountryCode")
eap <- subset(lifeReg, RegionName == "East Asia &amp; Pacific (all income levels)")
minVal <- min(eap[,-c(1,2,53,54)])
maxVal <- max(eap[,-c(1,2,53,54)])
eapYears <- eap[,-c(1,2,53,54)]
lifeLines <- function(series, col="black", hcol="black", lwd=1, hlwd=2, showPoints=FALSE) {
for (i in 1:length(series[,1])) {
lines(startYear:endYear, series[i,], col=col, lwd=lwd)
}
randomIndex <- sample(1:length(series[,1]), 1)
lines(startYear:endYear, series[randomIndex,], col=hcol, lwd=hlwd)
if (showPoints) {
points(startYear:endYear, series[randomIndex,], col=hcol, pch=4)
}
}
plot(0, 0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n")
lifeLines(eapYears)
#
# Deafult Plot Options
#
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", main="Life Expectancy in East Asia and Pacific", sub="Subtitle", xlab="Years", ylab="Age", asp=1/2)
lifeLines(eapYears)
#
par(las=1)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", main="Life Expectancy in East Asia and Pacific", xlab="", ylab="Age", asp=1/2)
lifeLines(eapYears, col="#cccccc")
par(mar=c(4, 4, 3, 1), oma=c(0,0,0,0), xpd=FALSE, xaxs="r", yaxs="i", mgp=c(2.1,.6,0), las=1, lend=1)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", las=1, main="Life Expectancy in East Asia and Pacific", xlab="", ylab=expression(bold("Age")), family="Helvetica", cex.axis=0.8, cex.lab=0.8, asp=1/2)
grid(NA, NULL, col="black", lty="dotted", lwd=0.3)
lifeLines(eapYears, col="dark grey", lwd=0.7, hlwd=3, hcol="#244A5D")
par(bg="#36394A", mar=c(5, 4, 3, 2), oma=c(0,0,0,0), xpd=FALSE, xaxs="r", yaxs="i", mgp=c(2.8,0.3,0.5), col.lab="white", col.axis="white", col.main="white", font.main=1, cex.main=0.8, cex.axis=0.8, cex.lab=0.8, family="Helvetica", lend=1, tck=0)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", las=1, asp=1/2, main="LIFE EXPECTANCY IN EAST ASIA AND PACIFIC", xlab="", ylab="")
lifeLines(eapYears, col="white", lwd=0.35, hcol="#E3DF0C", hlwd=3)
par(bg="#36394A", mar=c(5, 4, 3, 2), oma=c(0,0,0,0), xpd=FALSE, xaxs="r", yaxs="i", mgp=c(2.8,0.3,0.5), col.lab="white", col.axis="white", col.main="white", font.main=1, cex.main=0.8, cex.axis=0.8, cex.lab=0.8, family="Helvetica", lend=1, tck=0, las=1)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", las=1, asp=1/2, main="LIFE EXPECTANCY IN EAST ASIA AND PACIFIC", xlab="", ylab="", xaxt="n", yaxt="n")
axis(1, tick=FALSE, col.axis="white")
axis(2, tick=FALSE, col.axis="white")
lifeLines(eapYears, col="white", lwd=0.35, hcol="#E3DF0C", hlwd=3)
par(mar=c(3, 4, 3, 2), oma=c(0,0,0,0), bg="#F0F0F0", xpd=FALSE, xaxs="r", yaxs="i", mgp=c(2.1,.3,0), las=1, col.axis="#434343", col.main="#343434", tck=0, lend=1)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", las=1, main="Life Expectancy in East Asia and Pacific", xlab="", ylab="Age", family="Helvetica", cex.main=1.5, cex.axis=0.8, cex.lab=0.8, asp=1/2, xaxt="n", yaxt="n")
grid(NULL, NULL, col="#DEDEDE", lty="solid", lwd=0.9)
axis(1, tick=FALSE, cex.axis=0.9)
axis(2, tick=FALSE, cex.axis=0.9)
lifeLines(eapYears, col="dark grey", lwd=1, hlwd=3, hcol="#008ED4")
#
par(xpd=NA, oma=c(0,0,0,0), mar=c(0,0,0,0), bg="#DCE6EC", xpd=FALSE, xaxs="i", yaxs="i", lend=1)
plot(0, 0, type = "n", bty = "n", xaxt="n", yaxt="n", xlim=c(0,100), ylim=c(0,100))
rect(0,100,2,94, col="red", border=NA)
# Actual chart
par(mar=c(4, 3, 3, 2), oma=c(0,0,0,0), xpd=FALSE, xaxs="r", yaxs="i", mgp=c(1.8,.2,0), cex.axis=0.7, cex.lab=0.7, col.lab="black", col.axis="black", col.main="black", tck=0.02, yaxp=c(minVal, maxVal, 2), new=TRUE)
par(mar=c(4, 3, 3, 2), oma=c(0,0,0,0), xpd=FALSE, xaxs="r", yaxs="i", mgp=c(1.8,.2,0), cex.axis=0.7, cex.lab=0.7, col.lab="black", col.axis="black", col.main="black", tck=0.02, yaxp=c(minVal, maxVal, 2), new=TRUE)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", las=1, main="Life Expectancy in East Asia and Pacific", xlab=expression(italic("Years")), ylab=expression(italic("Age")), family="Helvetica", asp=1/2)
grid(NA, NULL, col="white", lty="solid", lwd=1.5)
lifeLines(eapYears, lwd=1.25, hlwd=2.5, col="#33A5A2", hcol="#244A5D")
par(las=1, tck=0.02, mgp=c(2.8,0.3,0.5), cex.lab=0.85, cex.axis=0.8, cex.main=0.9)
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", bty="n", main="Life Expectancy in East Asia and Pacific", xlab="", ylab="Age", asp=1/2)
lifeLines(eapYears, col="#cccccc", hlwd=1.2, showPoints=TRUE)
#
# Bright on Dark
#
par(bg="black", las=1, tck=0, mgp=c(2.8,0.3,0), cex.lab=0.85, cex.axis=0.8, cex.main=0.9, col.axis="white", col.main="white", col.lab="white")
plot(0, xlim=c(startYear, endYear), ylim=c(minVal, maxVal), type="n", main="Life Expectancy in East Asia and Pacific", xlab="Year", ylab="Age", asp=1/2)
grid(NULL, NULL, lty="solid", col="white", lwd=0.5)
lifeLines(eapYears, col="#f30baa", lwd=1.2, hcol="green", hlwd=3)
pctgdp <- read.csv('pct-gdp.txt')
setwd("~/Desktop/Github shares/FlowingData/Slopegraph")
pctgdp <- read.csv('pct-gdp.txt')
library(lattice)
parallelplot(pctgdp)
parallelplot(pctgdp[, c("pct1970", "pct1979")], horizontal.axis=FALSE)
plot(0, 0, type="n", main="Receipts of Government as Percent of GDP", xlab="", ylab="", xlim=c(1970,1979), ylim=c(20,60))
for (i in 1:length(pctgdp$country)) {
vals <- pctgdp[i,]
lines(c(1970, 1979), c(vals$pct1970, vals$pct1979))
}
plot(0, 0, type="n", main="Receipts of Government\n as Percent of GDP", xlab="", ylab="", xlim=c(1970,1979), ylim=c(20,60), bty="n", las=1)
for (i in 1:length(pctgdp$country)) {
vals <- pctgdp[i,]
lines(c(1970, 1979), c(vals$pct1970, vals$pct1979))
}
plot(0, 0, type="n", main="Receipts of Government\n as Percent of GDP", xlab="", ylab="", xlim=c(1970,1979), ylim=c(20,60), bty="n", las=1, axes=FALSE)
for (i in 1:length(pctgdp$country)) {
vals <- pctgdp[i,]
# Draw the line for current country
lines(c(1970, 1979), c(vals$pct1970, vals$pct1979))
# Left label
text(1970, vals$pct1970, vals$pct1970)
text(1979, vals$pct1979, vals$pct1979)
}
par(family="serif")
plot(0, 0, type="n", main="", xlab="", ylab="", xlim=c(1950,1990), ylim=c(20,60), bty="n", las=1, axes=FALSE)
for (i in 1:length(pctgdp$country)) {
vals <- pctgdp[i,]
# Draw the line for current country
lines(c(1970, 1979), c(vals$pct1970, vals$pct1979))
# Left label
text(1970, vals$pct1970, vals$pct1970, pos=2, cex=0.8)
text(1968, vals$pct1970, vals$country, pos=2, cex=0.8)
# Right label
text(1979, vals$pct1979, vals$pct1979, pos=4, cex=0.8)
text(1981, vals$pct1979, vals$country, pos=4, cex=0.8)
}
text(1950, 55, "Current Receipts of Government as a\nPercentage of Gross Domestic\nProduct, 1970 and 1979", cex=0.9, pos=4, family="Helvetica")
text(1970, 60, "1970", cex=0.9, pos=2, offset=1)
text(1979, 60, "1979", cex=0.9, pos=4, offset=0.5)
names(pdfFonts())
par(family="serif", mar=c(0,0,0,0))
plot(0, 0, type="n", main="", xlab="", ylab="", xlim=c(1950,1990), ylim=c(20,60), bty="n", las=1, axes=FALSE)
segments(rep(1970, length(pctgdp$country)), pctgdp$pct1970, rep(1979, length(pctgdp$country)), pctgdp$pct1979)
text(rep(1970, length(pctgdp$country)), pctgdp$pct1970, pctgdp$pct1970, pos=2, cex=0.8)
text(rep(1968, length(pctgdp$country)), pctgdp$pct1970, pctgdp$country, pos=2, cex=0.8)
text(rep(1979, length(pctgdp$country)), pctgdp$pct1979, pctgdp$pct1979, pos=4, cex=0.8)
text(rep(1981, length(pctgdp$country)), pctgdp$pct1979, pctgdp$country, pos=4, cex=0.8)
# Title
text(1950, 55, "Current Receipts of Government as a\nPercentage of Gross Domestic\nProduct, 1970 and 1979", cex=0.9, pos=4, family="Helvetica")
# Year labels
text(1970, 60, "1970", cex=0.9, pos=2, offset=1)
text(1979, 60, "1979", cex=0.9, pos=4, offset=0.5)
#
x0 <- c()
y0 <- c()
x1 <- c()
y1 <- c()
startyear <- 1970
stopyear <- 1979
xoffset <- 2
yoffset <- 0
ystartprev <- 0
ystopprev <- 0
ythreshold <- ( max(pctgdp$pct1970) - min(pctgdp$pct1970) ) * 0.025
for (i in length(pctgdp$country):1) {
vals <- pctgdp[i,]
ystartdiff <- (vals$pct1970+yoffset) - ystartprev
if (abs(ystartdiff) < ythreshold) {
yoffset <- yoffset + (ythreshold-ystartdiff)
}
# Calculate slope
slope <- (vals$pct1979 - vals$pct1970) / (stopyear - startyear)
# Intercept
intercept <- vals$pct1970 + yoffset
# Start and stop coordinates for lines
ystart <- intercept
ystop <- slope * (stopyear-startyear) + intercept
ystopdiff <- ystop - ystopprev
if (abs(ystopdiff) < ythreshold) {
yoffset <- yoffset + (ythreshold-ystopdiff)
intercept <- vals$pct1970 + yoffset
ystart <- intercept
ystop <- slope * (stopyear-startyear) + intercept
}
# Draw the line for current country
x0 <- c(x0, startyear)
y0 <- c(y0, ystart)
x1 <- c(x1, stopyear)
y1 <- c(y1, ystop)
ystartprev <- ystart
ystopprev <- ystop
}
ymin <- min(pctgdp$pct1970)
ymax <- max(c(pctgdp$pct1970, pctgdp$pct1979)) + yoffset
par(family="serif", mar=c(0,0,0,0))
plot(0, 0, type="n", main="", xlab="", ylab="", xlim=c(1950,1990), ylim=c(ymin,ymax*1.1), bty="n", las=1, axes=FALSE)
segments(x0, y0, x1, y1)
text(x0, y0, rev(pctgdp$pct1970), pos=2, cex=0.6)
text(x0-xoffset, y0, rev(pctgdp$country), pos=2, cex=0.6)
text(x1, y1, rev(pctgdp$pct1979), pos=4, cex=0.6)
text(x1+xoffset, y1, rev(pctgdp$country), pos=4, cex=0.6)
# Title
text(1950, ymax*1.06, "Current Receipts of\nGovernment as a Percentage\nof Gross Domestic Product,\n1970 and 1979", cex=0.8, pos=4)
# Year labels
text(startyear, ymax*1.1, "1970", cex=0.7, pos=2, offset=1)
text(stopyear, ymax*1.1, "1979", cex=0.7, pos=4, offset=0.5)
#
# Make it a function for easier usage
#
slopegraph <- function(startpts, endpts, labels) {
x0 <- c()
y0 <- c()
x1 <- c()
y1 <- c()
startyear <- 1970
stopyear <- 1979
xoffset <- 2
yoffset <- 0
ystartprev <- 0
ystopprev <- 0
ythreshold <- ( max(startpts) - min(startpts) ) * 0.025
for (i in length(startpts):1) {
ystartdiff <- (startpts[i]+yoffset) - ystartprev
if (abs(ystartdiff) < ythreshold) {
yoffset <- yoffset + (ythreshold-ystartdiff)
}
# Calculate slope
slope <- (endpts[i] - startpts[i]) / (stopyear - startyear)
# Intercept
intercept <- startpts[i] + yoffset
# Start and stop coordinates for lines
ystart <- intercept
ystop <- slope * (stopyear-startyear) + intercept
ystopdiff <- ystop - ystopprev
if (abs(ystopdiff) < ythreshold) {
yoffset <- yoffset + (ythreshold-ystopdiff)
intercept <- startpts[i] + yoffset
ystart <- intercept
ystop <- slope * (stopyear-startyear) + intercept
}
# Draw the line for current country
x0 <- c(x0, startyear)
y0 <- c(y0, ystart)
x1 <- c(x1, stopyear)
y1 <- c(y1, ystop)
ystartprev <- ystart
ystopprev <- ystop
}
ymin <- min(startpts)
ymax <- max(c(startpts, endpts)) + yoffset
par(family="serif", mar=c(0,0,0,0))
plot(0, 0, type="n", main="", xlab="", ylab="", xlim=c(1950,1990), ylim=c(ymin,ymax*1.1), bty="n", las=1, axes=FALSE)
segments(x0, y0, x1, y1)
text(x0, y0, rev(startpts), pos=2, cex=0.6)
text(x0-xoffset, y0, rev(labels), pos=2, cex=0.6)
text(x1, y1, rev(endpts), pos=4, cex=0.6)
text(x1+xoffset, y1, rev(labels), pos=4, cex=0.6)
# Year labels
text(startyear, ymax*1.1, deparse(substitute(startpts)), cex=0.7, pos=2, offset=1)
text(stopyear, ymax*1.1, deparse(substitute(endpts)), cex=0.7, pos=4, offset=0.5)
}
setwd("~/Desktop/Github shares/FlowingData/Heatmap 2")
leaders <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
leaders <- leaders[order(leaders$PTS),]
row.names(leaders) <- leaders$Name
leaders <- leaders[,2:20]
nba_matrix <- data.matrix(leaders)
heatmap(nba_matrix, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
nba <- read.csv("data/2008-09nba.trunc.csv", sep=",")
shots <- nba[nba$etype == "shot",]
# Take a quick look.
shots[1:10,]
# Some are NA. Get only known shots.
shots.known <- shots[!is.na(shots$x) & !is.na(shots$y),]
# Golden State Warriors shots
gsw <- subset(shots.known, team == "GSW")
# Basic symbol shot chart.
symbols(gsw$x, gsw$y, circles=rep(1,length(gsw$x)), asp=1, inches=FALSE)
# Aggregate by shot frequency
library(plyr)
gsw.agg <- count(gsw, c("x","y"))
# Size symbols by number of shots.
symbols(gsw.agg$x, gsw.agg$y, circles=sqrt(gsw.agg$freq)/8, asp=1, inches=FALSE, ylim=c(0,40))
gsw <- subset(shots.known, team == "GSW")
symbols(gsw$x, gsw$y, circles=rep(1,length(gsw$x)), asp=1, inches=FALSE)
# Aggregate by shot frequency
library(plyr)
gsw.agg <- count(gsw, c("x","y"))
# Size symbols by number of shots.
symbols(gsw.agg$x, gsw.agg$y, circles=sqrt(gsw.agg$freq)/8, asp=1, inches=FALSE, ylim=c(0,40))
symbols(gsw.agg$x, gsw.agg$y, squares=sqrt(gsw.agg$freq)/8, asp=1, inches=FALSE, ylim=c(0,40))
# Hexbins
library(hexbin)
h <- hexbin(gsw$x, gsw$y, xbins=20, shape=80/50)
plot(h)
# Helper function to get color by shot frequency
getColor <- function(val) {
minVal <- log(1)		# Using logarithmic scale
